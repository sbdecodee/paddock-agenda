/* ShareMoments: front-end only, non-invasive. */
(() => {
  const NS = 'sm';
  const CSS_ID = 'share-moments-styles';
  const API_BASE = '/api/moments';
  const ASSETS_BASE = '/assets/moments';
  const POLL_MS = 15000;

  function ready(fn) {
    if (document.readyState !== 'loading') fn();
    else document.addEventListener('DOMContentLoaded', fn, { once: true });
  }

  function injectStyles() {
    if (document.getElementById(CSS_ID)) return;
    const style = document.createElement('style');
    style.id = CSS_ID;
    style.textContent = `
      :root { --brand-blue: var(--brand-blue, #0b5bd3); --brand-red: var(--brand-red, #e02020); }
      .${NS}-btn { display:inline-flex; align-items:center; gap:.5rem; padding:.5rem .75rem; border:1px solid #ccc; border-radius:999px; background:#fff; cursor:pointer; font:inherit; }
      .${NS}-btn:hover { background:#f7f7f7; }
      .${NS}-panel { box-sizing:border-box; margin:32px 0 32px 0; padding:28px 0 0 0; border-top:2px solid var(--brand-red, #e02020); }
      @media (max-width: 640px){ .${NS}-panel { margin:28px 0 28px 0; padding-top:28px; } }
      .${NS}-panel h2 { margin:0 0 .5rem 0; font-size:1.25rem; }
      .${NS}-actions { display:flex; flex-wrap:wrap; gap:.5rem; align-items:center; margin-bottom:1rem; }
      .${NS}-hidden { position:absolute; left:-9999px; width:1px; height:1px; overflow:hidden; }
      .${NS}-grid { display:grid; grid-template-columns:repeat(auto-fill,minmax(160px,1fr)); gap:.5rem; }
      .${NS}-item { position:relative; background:#f2f2f2; border-radius:8px; overflow:hidden; }
      .${NS}-item img { width:100%; height:160px; object-fit:cover; display:block; }
      .${NS}-overlay { position:absolute; inset:0; display:flex; justify-content:flex-end; gap:.25rem; padding:.25rem; opacity:0; transition:opacity .2s; background:linear-gradient(to bottom, rgba(0,0,0,.15), rgba(0,0,0,0)); }
      .${NS}-item:hover .${NS}-overlay { opacity:1; }
      .${NS}-iconbtn { background:rgba(255,255,255,.9); border:none; border-radius:6px; padding:.25rem .4rem; cursor:pointer; font-size:.85rem; }
      .${NS}-lightbox { position:fixed; inset:0; background:rgba(0,0,0,.8); display:none; align-items:center; justify-content:center; z-index:9999; }
      .${NS}-lightbox.open { display:flex; }
      .${NS}-lightbox img { max-width:90vw; max-height:90vh; border-radius:8px; }
      .${NS}-fixedbtn { position:fixed; bottom:1rem; right:1rem; z-index:999; }
      .${NS}-btn svg { width:18px; height:18px; }
      .${NS}-chooser { position:absolute; top:100%; right:0; background:#fff; border:1px solid #ddd; border-radius:10px; padding:.5rem; box-shadow:0 8px 24px rgba(0,0,0,.12); display:none; flex-direction:column; gap:.25rem; z-index:1000; }
      .${NS}-chooser.open { display:flex; }
      .${NS}-chooser button { border:none; background:#f6f6f6; padding:.5rem .75rem; border-radius:8px; cursor:pointer; display:flex; align-items:center; gap:.5rem; font:inherit; }
      .${NS}-chooser button:hover { background:#ececec; }
      .${NS}-headerwrap { display:inline-flex; align-items:center; position:relative; margin-left:.75rem; }
      .${NS}-bannerwrap { position:relative; display:block; width:100%; box-sizing:border-box; margin:28px 0 28px 0; grid-column:1/-1; flex:0 0 100%; align-self:stretch; }
      .${NS}-bannerwrap .${NS}-banner { display:block !important; width:100% !important; text-align:center !important; padding:12px 16px !important; border-radius:8px !important; border:0 !important; cursor:pointer; font:inherit; font-weight:500; letter-spacing:.2px; background:var(--brand-red, #e02020) !important; color:#ffffff !important; }
      .${NS}-bannerwrap .${NS}-banner:hover { filter:brightness(1.05); }
      /* ensure spacing: the element after the banner should not add extra top margin */
      .${NS}-bannerwrap + * { margin-top: 0 !important; }
      .${NS}-bannerwrap + * > :first-child { margin-top: 0 !important; }
      @media (max-width: 640px) {
        .${NS}-bannerwrap { margin-top: 20px !important; margin-bottom: 12px !important; }
      }
      .${NS}-action { background:var(--brand-red, #e02020); color:#fff; border:none; border-radius:14px; padding:.55rem .8rem; display:inline-flex; align-items:center; gap:.5rem; font-weight:600; box-shadow:0 4px 10px rgba(0,0,0,.12); }
      .${NS}-action svg { width:18px; height:18px; stroke:#fff; fill:none; stroke-width:2; }
    `;
    document.head.appendChild(style);
  }

  function buildUI() {
    const panel = document.createElement('section');
    panel.className = `${NS}-panel`;
    panel.setAttribute('aria-label', 'Comparte tu experiencia');
    panel.innerHTML = `
      <h2 id="${NS}-title">Momentos</h2>
      <div class="${NS}-actions">
        <input id="${NS}-file-camera" class="${NS}-hidden" type="file" accept="image/*" capture="environment" multiple>
        <input id="${NS}-file-gallery" class="${NS}-hidden" type="file" accept="image/*" multiple>
        <button type="button" class="${NS}-action" id="${NS}-trigger-camera" aria-label="Abrir cámara" title="Abrir cámara">
          <svg viewBox="0 0 24 24" aria-hidden="true"><path d="M6 12h12" stroke="currentColor" stroke-width="2" stroke-linecap="round"/><path d="M12 6v12" stroke="currentColor" stroke-width="2" stroke-linecap="round"/></svg>
          <svg viewBox="0 0 24 24" aria-hidden="true"><rect x="4.5" y="7.5" width="15" height="10" rx="2" stroke="currentColor" stroke-width="2" fill="none"/><path d="M9 7l1.2-2h3.6L15 7" stroke="currentColor" stroke-width="2" fill="none" stroke-linecap="round"/><circle cx="12" cy="12" r="3" stroke="currentColor" stroke-width="2" fill="none"/></svg>
        </button>
      </div>
      <div class="${NS}-grid" id="${NS}-grid" aria-live="polite"></div>
    `;

    const lightbox = document.createElement('div');
    lightbox.className = `${NS}-lightbox`;
    lightbox.innerHTML = `<img alt="">`;
    lightbox.addEventListener('click', () => lightbox.classList.remove('open'));
    panel.appendChild(lightbox);

    // Banner button + chooser (full width above Agenda)
    const headerWrap = document.createElement('div');
    headerWrap.className = `${NS}-bannerwrap`;
    // Ensure margins apply even inside flex/grid parents
    Object.assign(headerWrap.style, { marginTop: '28px', width: '100%' });
    const headerBtn = document.createElement('button');
    headerBtn.type = 'button';
    headerBtn.className = `${NS}-banner`;
    headerBtn.textContent = 'Comparte tu experiencia';
    // Inline styles to win against external CSS collisions
    Object.assign(headerBtn.style, {
      background: 'var(--brand-red, #e02020)',
      color: '#ffffff',
      display: 'block',
      width: '100%',
      textAlign: 'center',
      padding: '12px 16px',
      borderRadius: '8px',
      border: '0',
      fontWeight: '500',
      letterSpacing: '.2px',
      cursor: 'pointer'
    });
    const chooser = document.createElement('div');
    chooser.className = `${NS}-chooser`;
    const btnCam = document.createElement('button');
    btnCam.innerHTML = `<svg viewBox="0 0 24 24" aria-hidden="true"><path d="M9 4l1.5-2h3L15 4h3a3 3 0 013 3v10a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h3zm3 13a5 5 0 100-10 5 5 0 000 10z" fill="currentColor"/></svg> Cámara`;
    const btnGal = document.createElement('button');
    btnGal.innerHTML = `<svg viewBox=\"0 0 24 24\" aria-hidden=\"true\"><path d=\"M3 5a2 2 0 012-2h5l2 2h7a2 2 0 012 2v2H3V5zm0 5h18v7a2 2 0 01-2 2H5a2 2 0 01-2-2v-7z\" fill=\"currentColor\"/></svg> Galería`;
    chooser.appendChild(btnCam);
    chooser.appendChild(btnGal);
    headerWrap.appendChild(headerBtn);
    headerWrap.appendChild(chooser);

    headerBtn.addEventListener('click', (e) => {
      e.stopPropagation();
      chooser.classList.toggle('open');
    });
    document.addEventListener('click', () => chooser.classList.remove('open'));

    return { panel, headerWrap, headerBtn, chooser, btnCam, btnGal };
  }

  function placeBannerAboveAgenda(elToInsert) {
    if (elToInsert.dataset.smInserted) return; // prevent duplicates
    const norm = (t) => (t || '').toString().trim().normalize('NFD').replace(/[\u0300-\u036f]/g, '').toLowerCase();

    const findTarget = () => {
      // 1) Exact anchor/id
      let t = document.getElementById('agenda') || document.querySelector('[name="agenda"], a[href="#agenda"]');
      if (t) {
        const h = t.closest('h1,h2,h3,h4,h5,h6') || t.querySelector?.('h1,h2,h3,h4,h5,h6');
        return h || t;
      }
      // 2) A real heading that contains the word "agenda" (diacritics-insensitive)
      const headings = Array.from(document.querySelectorAll('h1,h2,h3,h4,h5,h6'));
      const match = headings.find(h => /\bagenda\b/.test(norm(h.textContent)) || norm(h.textContent).startsWith('agenda '));
      if (match) return match;
      return null;
    };

    const tryInsert = () => {
      const target = findTarget();
      if (target) {
        try {
          const section = target.closest('section,main,article') || target.parentElement;
          if (section && section.parentElement) {
            // Insert before the whole Agenda section for full-width effect
            section.parentElement.insertBefore(elToInsert, section);
          } else if (target.parentElement) {
            target.parentElement.insertBefore(elToInsert, target);
          } else {
            document.body.insertBefore(elToInsert, document.body.firstChild);
          }
          elToInsert.dataset.smInserted = '1';
          return true;
        } catch (_) { /* ignore */ }
      }
      return false;
    };

    if (tryInsert()) return;

    // Fallback: observe until Agenda appears (SPA/tarde)
    const obs = new MutationObserver(() => { if (tryInsert()) obs.disconnect(); });
    obs.observe(document.body, { childList: true, subtree: true });

    // Safety timeout: if never found, prepend to main/body after a delay
    setTimeout(() => {
      if (elToInsert.dataset.smInserted) return;
      const main = document.querySelector('main');
      if (main) main.prepend(elToInsert); else document.body.prepend(elToInsert);
      elToInsert.dataset.smInserted = '1';
      obs.disconnect();
    }, 3000);
  }

  // IndexedDB minimal store for local-only fallback
  const idb = (() => {
    let dbp;
    function db() {
      if (dbp) return dbp;
      dbp = new Promise((resolve, reject) => {
        const open = indexedDB.open('sm-db', 1);
        open.onupgradeneeded = () => {
          open.result.createObjectStore('photos', { keyPath: 'id', autoIncrement: true });
        };
        open.onsuccess = () => resolve(open.result);
        open.onerror = () => reject(open.error);
      });
      return dbp;
    }
    async function add(photo) {
      const d = await db();
      return new Promise((res, rej) => {
        const tx = d.transaction('photos', 'readwrite');
        tx.objectStore('photos').add(photo);
        tx.oncomplete = () => res();
        tx.onerror = () => rej(tx.error);
      });
    }
    async function all() {
      const d = await db();
      return new Promise((res, rej) => {
        const tx = d.transaction('photos', 'readonly');
        const req = tx.objectStore('photos').getAll();
        req.onsuccess = () => res(req.result || []);
        req.onerror = () => rej(req.error);
      });
    }
    return { add, all };
  })();

  function setupHandlers(panel, controls) {
    const fileCam = panel.querySelector(`#${NS}-file-camera`);
    const fileGal = panel.querySelector(`#${NS}-file-gallery`);
    const triggerCam = panel.querySelector(`#${NS}-trigger-camera`);

    triggerCam.addEventListener('click', () => fileCam.click());

